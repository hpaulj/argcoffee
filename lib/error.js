// Generated by CoffeeScript 1.6.1
var $$, ArgumentError, ArgumentTypeError, _get_action_name,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

$$ = require('./const').$$;

/*
class ArgumentTypeError(Exception):
    """An error from trying to convert a command line string to a type."""
    pass
*/


ArgumentTypeError = (function(_super) {

  __extends(ArgumentTypeError, _super);

  function ArgumentTypeError(msg) {
    Error.captureStackTrace(this, this);
    this.message = msg || 'Argument Error';
    this.name = 'ArgumentTypeError';
  }

  return ArgumentTypeError;

})(Error);

/*
An error from creating or using an argument (optional or positional).

The string value of this exception is the message, augmented with
information about the argument that caused it.
*/


ArgumentError = (function(_super) {

  __extends(ArgumentError, _super);

  function ArgumentError(argument, message) {
    this.argument = argument != null ? argument : null;
    this.message = message != null ? message : "";
    this.name = "ArgumentError";
    Error.captureStackTrace(this, this);
    try {
      this.argument_name = this.argument.getName();
    } catch (err) {
      this.argument_name = _get_action_name(this.argument);
    }
  }

  ArgumentError.prototype.toString = function() {
    var astr;
    if (this.argument_name != null) {
      astr = "argument \"" + this.argument_name + "\": " + this.message;
    } else {
      astr = "" + this.message;
    }
    return astr = this.name + ': ' + astr;
  };

  return ArgumentError;

})(Error);

exports.ArgumentTypeError = ArgumentTypeError;

exports.ArgumentError = ArgumentError;

_get_action_name = function(argument) {
  var _ref, _ref1;
  if (argument === null) {
    return null;
  } else if (argument.isOptional()) {
    return argument.option_strings.join('/');
  } else if ((_ref = argument.metavar) !== null && _ref !== $$.SUPPRESS) {
    return argument.metavar;
  } else if ((_ref1 = argument.dest) !== null && _ref1 !== $$.SUPPRESS) {
    return argument.dest;
  } else {
    return null;
  }
};
