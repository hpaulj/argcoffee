

  base
    â—¦ should parse argument in short form: [2K[0G    âœ“ should parse argument in short form 
    â—¦ should parse argument in long form: [2K[0G    âœ“ should parse argument in long form 
    â—¦ should parse multiple arguments: [2K[0G    âœ“ should parse multiple arguments 
    â—¦ should check argument type: [2K[0G    âœ“ should check argument type 
    â—¦ should not drop down with empty args (without positional arguments): [2K[0G    âœ“ should not drop down with empty args (without positional arguments) 
    â—¦ should drop down with empty args (positional arguments): [2K[0G    âœ“ should drop down with empty args (positional arguments) 
    â—¦ should support pseudo-argument: [2K[0G    âœ“ should support pseudo-argument 
    â—¦ should support #setDefaults: [2K[0G    âœ“ should support #setDefaults 
    â—¦ should throw TypeError with conflicting options: [2K[0G    âœ“ should throw TypeError with conflicting options 
    â—¦ should parse negative arguments: [2K[0G    âœ“ should parse negative arguments 
    â—¦ No negative number options; neg number is positional argument: [2K[0G    âœ“ No negative number options; neg number is positional argument 
    â—¦ negative number options present, so any neg number is an option: [2K[0G    âœ“ negative number options present, so any neg number is an option 
    â—¦ should infer option destination from long and short options: [2K[0G    âœ“ should infer option destination from long and short options 
    â—¦ should accept 0 defaultValue: [2K[0G    âœ“ should accept 0 defaultValue 
    â—¦ getDefault() should get defaults: [2K[0G    âœ“ getDefault() should get defaults 
    â—¦ should handle mixed positional and optional args: [2K[0G    âœ“ should handle mixed positional and optional args 
    â—¦ test empty and space containing arguments: [2K[0G    âœ“ test empty and space containing arguments 

  child group
    â—¦ compare help parent and child: [2K[0G    âœ“ compare help parent and child 
    â—¦ child should  throw error if an xclusive group member is missing: [2K[0G    1) child should  throw error if an xclusive group member is missing
    â—¦ child accepts an xgroup item and positional arg from parent: [2K[0G    âœ“ child accepts an xgroup item and positional arg from parent 
    â—¦ child throws error if both xclusive options are given: [2K[0G    2) child throws error if both xclusive options are given

  choices
    â—¦ should store correct choice(choices defined as string): [2K[0G    âœ“ should store correct choice(choices defined as string) 
    â—¦ should drop down with 'Invalid choice' error for incorrect choices(choices defined as string): [2K[0G    âœ“ should drop down with 'Invalid choice' error for incorrect choices(choices defined as string) 
    â—¦ should store correct choice(choices defined as array): [2K[0G    âœ“ should store correct choice(choices defined as array) 
    â—¦ should drop down with 'Invalid choice' error for incorrect choices(choices defined as array): [2K[0G    âœ“ should drop down with 'Invalid choice' error for incorrect choices(choices defined as array) 

  Argument conflict handling
    â—¦ test_bad_type: [2K[0G    3) test_bad_type
    â—¦ test_conflict_error: [2K[0G    âœ“ test_conflict_error 
    â—¦ test_resolve_error: [2K[0G    4) test_resolve_error
    â—¦ TypeError with multiple conflicts: [2K[0G    âœ“ TypeError with multiple conflicts 
    â—¦ resolving multiple conflicts: [2K[0G    5) resolving multiple conflicts

  constant actions
    â—¦ storeConst should store constant as given: [2K[0G    âœ“ storeConst should store constant as given 
    â—¦ storeConst should give error if constant not given (or misspelled): [2K[0G    6) storeConst should give error if constant not given (or misspelled)
    â—¦ appendConst should append constant as given: [2K[0G    âœ“ appendConst should append constant as given 
    â—¦ appendConst should give error if constant not given (or misspelled): [2K[0G    7) appendConst should give error if constant not given (or misspelled)

  formatterClass alternatives
    â—¦ ArgumentDefaultsHelpFormatter: [2K[0G    âœ“ ArgumentDefaultsHelpFormatter 
    â—¦ RawDescriptionHelpFormatter: [2K[0G    âœ“ RawDescriptionHelpFormatter 
    â—¦ RawTextHelpFormatter: [2K[0G    âœ“ RawTextHelpFormatter 
    â—¦ should handle metavar as an array: [2K[0G    âœ“ should handle metavar as an array 

  from file
    â—¦ test reading arguments from a file: [2K[0G    8) test reading arguments from a file
    â—¦ test recursive reading arguments from files: [2K[0G    9) test recursive reading arguments from files
    â—¦ fest reading arguments from an invalid file: [2K[0G    10) fest reading arguments from an invalid file
    â—¦ test reading arguments from an missing file: [2K[0G    11) test reading arguments from an missing file
    â—¦ test custom convertArgLineToArgs function: [2K[0G    12) test custom convertArgLineToArgs function

  group
    â—¦ group test: [2K[0G    13) group test
    â—¦ 2 groups test: [2K[0G    14) 2 groups test
    â—¦ mutually exclusive group test: [2K[0G    âœ“ mutually exclusive group test 
    â—¦ mutually exclusive group test (2): [2K[0G    15) mutually exclusive group test (2)
    â—¦ mutually exclusive group test (3): [2K[0G    16) mutually exclusive group test (3)
    â—¦ mutually exclusive group usage: [2K[0G    âœ“ mutually exclusive group usage 
    â—¦ mutually exclusive optional and positional: [2K[0G    âœ“ mutually exclusive optional and positional 
    â—¦ two mutually exclusive groups: [2K[0G    âœ“ two mutually exclusive groups 
    â—¦ suppressed and single action groups: [2K[0G    âœ“ suppressed and single action groups 

  nargs
    â—¦ test specifying the 1 arg for an Optional: [2K[0G    âœ“ test specifying the 1 arg for an Optional 
    â—¦ test specifying the 3 args for an Optional: [2K[0G    âœ“ test specifying the 3 args for an Optional 
    â—¦ tests not specifying the number of args for an Optional: [2K[0G    âœ“ tests not specifying the number of args for an Optional 
    â—¦ test specifying an args for an Optional, that accepts one or more: [2K[0G    âœ“ test specifying an args for an Optional, that accepts one or more 
    â—¦ test specifying an Optional arg for an Optional: [2K[0G    âœ“ test specifying an Optional arg for an Optional 
    â—¦ test specifying an args for an Optional that accepts zero or more: [2K[0G    âœ“ test specifying an args for an Optional that accepts zero or more 
    â—¦ test a Positional that specifies an nargs of 1: [2K[0G    âœ“ test a Positional that specifies an nargs of 1 
    â—¦ test a Positional that specifies an nargs of 2: [2K[0G    âœ“ test a Positional that specifies an nargs of 2 
    â—¦ test a Positional with 2 nargs followed by one with none: [2K[0G    âœ“ test a Positional with 2 nargs followed by one with none 
    â—¦ test a Positional with 2 nargs followed by one with one or more: [2K[0G    âœ“ test a Positional with 2 nargs followed by one with one or more 
    â—¦ test a Positional with 2 nargs followed by one optional: [2K[0G    âœ“ test a Positional with 2 nargs followed by one optional 
    â—¦ test a Positional with 2 nargs followed by one with unlimited: [2K[0G    âœ“ test a Positional with 2 nargs followed by one with unlimited 
    â—¦ test a Positional that doesn't specify nargs: [2K[0G    âœ“ test a Positional that doesn't specify nargs 
    â—¦ test a Positional with no nargs followed by one with 1: [2K[0G    âœ“ test a Positional with no nargs followed by one with 1 
    â—¦ test two Positionals that don't specify nargs: [2K[0G    âœ“ test two Positionals that don't specify nargs 
    â—¦ test a Positional with no nargs followed by one with one or more: [2K[0G    âœ“ test a Positional with no nargs followed by one with one or more 
    â—¦ test three Positionals: no nargs, one or more nargs and 1 nargs: [2K[0G    âœ“ test three Positionals: no nargs, one or more nargs and 1 nargs 
    â—¦ test a Positional with no nargs followed by one with an Optional: [2K[0G    âœ“ test a Positional with no nargs followed by one with an Optional 
    â—¦ test three Positionals: no nargs, optional narg and 1 nargs: [2K[0G    âœ“ test three Positionals: no nargs, optional narg and 1 nargs 
    â—¦ test a Positional with no nargs followed by one with unlimited: [2K[0G    âœ“ test a Positional with no nargs followed by one with unlimited 
    â—¦ test three Positionals: no nargs, unlimited nargs and 1 nargs: [2K[0G    âœ“ test three Positionals: no nargs, unlimited nargs and 1 nargs 
    â—¦ test a Positional that specifies one or more nargs: [2K[0G    âœ“ test a Positional that specifies one or more nargs 
    â—¦ test a Positional with one or more nargs followed by one with 1: [2K[0G    âœ“ test a Positional with one or more nargs followed by one with 1 
    â—¦ test a Positional with one or more nargs followed by one with none: [2K[0G    âœ“ test a Positional with one or more nargs followed by one with none 
    â—¦ tests an Optional Positional: [2K[0G    âœ“ tests an Optional Positional 
    â—¦ test a Positional with an Optional nargs followed by one with 1: [2K[0G    âœ“ test a Positional with an Optional nargs followed by one with 1 
    â—¦ test an Optional Positional with a default value (that needs to be converted to the appropriate type.): [2K[0G    âœ“ test an Optional Positional with a default value (that needs to be converted to the appropriate type.) 
    â—¦ tests an Optional Positional with a default value: [2K[0G    âœ“ tests an Optional Positional with a default value 
    â—¦ test a Positional with an Optional nargs followed by one with none: [2K[0G    âœ“ test a Positional with an Optional nargs followed by one with none 
    â—¦ test an Optional narg followed by one or more nargs: [2K[0G    âœ“ test an Optional narg followed by one or more nargs 
    â—¦ test two optional nargs: [2K[0G    âœ“ test two optional nargs 
    â—¦ test an Optional narg followed by unlimited nargs: [2K[0G    âœ“ test an Optional narg followed by unlimited nargs 
    â—¦ test a Positional that specifies unlimited nargs: [2K[0G    âœ“ test a Positional that specifies unlimited nargs 
    â—¦ test a `nargs` + `append` combination. Not obvious result - nested array: [2K[0G    âœ“ test a `nargs` + `append` combination. Not obvious result - nested array 
    â—¦ test a Positional with unlimited nargs followed by one with 1: [2K[0G    âœ“ test a Positional with unlimited nargs followed by one with 1 
    â—¦ test a Positional that specifies unlimited nargs and a default: [2K[0G    âœ“ test a Positional that specifies unlimited nargs and a default 
    â—¦ test a Positional with unlimited nargs followed by one with none: [2K[0G    âœ“ test a Positional with unlimited nargs followed by one with none 
    â—¦ test specifying a positional with nargs=REMAINDER: [2K[0G    âœ“ test specifying a positional with nargs=REMAINDER 
    â—¦ test specifying an args for an Optional that accepts zero or more: [2K[0G    âœ“ test specifying an args for an Optional that accepts zero or more 
    â—¦ should accept defaultValue for nargs:'*': [2K[0G    âœ“ should accept defaultValue for nargs:'*' 

  optionals
    â—¦ test options that may or may not be arguments: [2K[0G    âœ“ test options that may or may not be arguments 
    â—¦ test the append action for an Optional: [2K[0G    âœ“ test the append action for an Optional 
    â—¦ test the append_const action for an Optional: [2K[0G    âœ“ test the append_const action for an Optional 
    â—¦ test the append_const action for an Optional: [2K[0G    âœ“ test the append_const action for an Optional 
    â—¦ test the append action for an Optional: [2K[0G    âœ“ test the append action for an Optional 
    â—¦ test the count action for an Optional: [2K[0G    âœ“ test the count action for an Optional 
    â—¦ test the store action for an Optional: [2K[0G    âœ“ test the store action for an Optional 
    â—¦ test the store_const action for an Optional: [2K[0G    âœ“ test the store_const action for an Optional 
    â—¦ test the store_false action for an Optional: [2K[0G    âœ“ test the store_false action for an Optional 
    â—¦ test the store_true action for an Optional: [2K[0G    âœ“ test the store_true action for an Optional 
    â—¦ test negative number args when almost numeric options are present: [2K[0G    âœ“ test negative number args when almost numeric options are present 
    â—¦ test specifying the choices for an Optional: [2K[0G    âœ“ test specifying the choices for an Optional 
    â—¦ test specifying a default for an Optional: [2K[0G    âœ“ test specifying a default for an Optional 
    â—¦ test various means of setting destination: [2K[0G    âœ“ test various means of setting destination 
    â—¦ test an Optional with a double-dash option string: [2K[0G    âœ“ test an Optional with a double-dash option string 
    â—¦ tests partial matching with a double-dash option string: [2K[0G    âœ“ tests partial matching with a double-dash option string 
    â—¦ test an Optional with a short opt string: [2K[0G    âœ“ test an Optional with a short opt string 
    â—¦ test negative number args when numeric options are present: [2K[0G    âœ“ test negative number args when numeric options are present 
    â—¦ tests the an optional action that is required: [2K[0G    âœ“ tests the an optional action that is required 
    â—¦ test a combination of single- and double-dash option strings: [2K[0G    âœ“ test a combination of single- and double-dash option strings 
    â—¦ test an Optional with a single-dash option string: [2K[0G    âœ“ test an Optional with a single-dash option string 
    â—¦ test Optionals that partially match but are not subsets: [2K[0G    âœ“ test Optionals that partially match but are not subsets 
    â—¦ test an Optional with a single-dash option string: [2K[0G    âœ“ test an Optional with a single-dash option string 
    â—¦ test an Optional with a multi-character single-dash option string: [2K[0G    âœ“ test an Optional with a multi-character single-dash option string 
    â—¦ test Optionals where option strings are subsets of each other: [2K[0G    âœ“ test Optionals where option strings are subsets of each other 
    â—¦ test an Optional with single- and double-dash option strings: [2K[0G    âœ“ test an Optional with single- and double-dash option strings 

  parents
    â—¦ should parse args from parents parser: [2K[0G    âœ“ should parse args from parents parser 
    â—¦ should throw error if has same args as parent: [2K[0G    âœ“ should throw error if has same args as parent 

  positionals
    â—¦ test the 'append' action: [2K[0G    âœ“ test the 'append' action 
    â—¦ test a set of integer choices: [2K[0G    âœ“ test a set of integer choices 
    â—¦ test a set of single-character choices: [2K[0G    âœ“ test a set of single-character choices 

  prefix
    â—¦ test an Optional with option strings with custom prefixes: [2K[0G    âœ“ test an Optional with option strings with custom prefixes 
    â—¦ when "-" not in prefix_chars, default operators created for help should use the prefix_chars in use rather than - or --: [2K[0G    âœ“ when "-" not in prefix_chars, default operators created for help should use the prefix_chars in use rather than - or -- 
    â—¦ verify that Optionals must be called with their defined prefixes: [2K[0G    âœ“ verify that Optionals must be called with their defined prefixes 
    â—¦ test when one double-dash option string is a prefix of another: [2K[0G    âœ“ test when one double-dash option string is a prefix of another 
    â—¦ test arguments from prefix chars only: [2K[0G    âœ“ test arguments from prefix chars only 

  sub-commands
    â—¦ should store command name: [2K[0G    âœ“ should store command name 
    â—¦ should store command arguments: [2K[0G    âœ“ should store command arguments 
    â—¦ should have same behavior for alias and original command: [2K[0G    âœ“ should have same behavior for alias and original command 
    â—¦ should have different behavior for different commands: [2K[0G    âœ“ should have different behavior for different commands 
    â—¦ should drop down with "Invalid choice" error if parse unrecognized command: [2K[0G    âœ“ should drop down with "Invalid choice" error if parse unrecognized command 
    â—¦ should drop down with empty args ('too few arguments' error): [2K[0G    âœ“ should drop down with empty args ('too few arguments' error) 
    â—¦ should support #setDefaults: [2K[0G    âœ“ should support #setDefaults 

  suppress defaults
    â—¦ test actions with suppressed defaults: [2K[0G    âœ“ test actions with suppressed defaults 
    â—¦ test actions with a parser-level default of SUPPRESS: [2K[0G    âœ“ test actions with a parser-level default of SUPPRESS 

  user defined type
    â—¦ should handle builtin types: [2K[0G    âœ“ should handle builtin types 
    â—¦ should handle user-defined type: [2K[0G    âœ“ should handle user-defined type 
    â—¦ should give consistent type errors: [2K[0G    âœ“ should give consistent type errors 
    â—¦ test a user-defined type by registering it: [2K[0G    âœ“ test a user-defined type by registering it 
    â—¦ test an anonymous user-defined type: [2K[0G    17) test an anonymous user-defined type


